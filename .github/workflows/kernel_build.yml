name: Custom Kernel Build

on:
  workflow_dispatch:
    inputs:
      kernel_repo:
        description: 'Kernel source repository'
        required: true
        default: 'Dark-Matter7232/CosmicFresh-Hanoip'
      kernel_branch:
        description: 'Kernel source branch'
        required: true
        default: 'main'
      defconfig_name:
        description: 'Kernel defconfig name'
        required: true
        default: 'hanoip_defconfig'
      # Using a single, all-in-one AOSP Clang toolchain
      toolchain_repo:
        description: 'Toolchain repository'
        required: true
        default: 'aosp-mirror/platform_prebuilts_clang_host_linux-x86'
      toolchain_branch:
        description: 'Toolchain branch'
        required: true
        default: 'master'

jobs:
  build_kernel:
    runs-on: ubuntu-latest
    
    steps:
      - name: 🚀 Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.kernel_repo }}
          ref: ${{ github.event.inputs.kernel_branch }}
          path: kernel_source

      - name: 📦 Checkout AnyKernel3
        uses: actions/checkout@v4
        with:
          repository: 'osm0sis/AnyKernel3'
          path: anykernel3

      - name: 🛠️ Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential flex bison libssl-dev libelf-dev ccache bc libz-dev wget python3

      - name: ⚙️ Clone Toolchain
        run: |
          # Use the GITHUB_TOKEN for authentication
          git clone --depth=1 --single-branch -b ${{ github.event.inputs.toolchain_branch }} https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.event.inputs.toolchain_repo }} toolchain

      - name: ⚙️ Set up Environment Variables
        run: |
          # Find the actual path to the GCC cross-compiler inside the Clang toolchain
          GCC_PATH=$(find "$(pwd)/toolchain" -name "aarch64-linux-gnu-gcc" -type f | xargs dirname)
          
          # Add the toolchain and GCC paths to the environment
          echo "PATH=$(pwd)/toolchain/bin:$GCC_PATH:$PATH" >> $GITHUB_ENV
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_COMPAT=arm-linux-gnueabi-" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          
      - name: 💻 Build Kernel
        id: build_step
        run: |
          cd kernel_source
          make O=out ${{ github.event.inputs.defconfig_name }}
          make O=out -j$(nproc --all)

      - name: 📦 Package with AnyKernel3
        run: |
          cd anykernel3
          cp ../kernel_source/out/arch/arm64/boot/Image.gz-dtb .
          zip -r9 ${{ github.event.repository.name }}_${{ github.sha }}.zip . -x .git
          
      - name: ⬆️ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: custom-kernel
          path: anykernel3/*.zip
