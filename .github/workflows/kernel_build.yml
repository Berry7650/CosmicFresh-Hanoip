name: Final Fixed Custom Kernel Build

on:
  workflow_dispatch:
    inputs:
      kernel_repo:
        description: 'Kernel source repository (e.g., user/repo)'
        required: true
        default: 'Dark-Matter7232/CosmicFresh-Hanoip'
      kernel_branch:
        description: 'Kernel source branch'
        required: true
        default: 'main'
      defconfig_name:
        description: 'Kernel defconfig file name'
        required: true
        default: 'hanoip_defconfig'
      clang_repo:
        description: 'Clang toolchain repository (e.g., user/repo)'
        required: true
        default: 'kdrag0n/proton-clang'
      clang_branch:
        description: 'Clang toolchain branch'
        required: true
        default: 'master'
      zip_name:
        description: 'Name of the final flashable zip (without .zip)'
        required: true
        default: 'CosmicFresh-Kernel-Final'
      image_name:
        description: 'Name of the kernel image to package'
        required: true
        default: 'Image.gz-dtb'
      apply_legacy_fixes:
        description: 'Apply specific patches for older kernel sources?'
        type: boolean
        default: true
      include_ksu:
        description: 'Include KernelSU in the build?'
        type: boolean
        default: true
      include_sosfos:
        description: 'Include SOSFOS module in the build?'
        type: boolean
        default: true
env:
  TZ: "Asia/Kolkata"

jobs:
  build_kernel:
    runs-on: ubuntu-22.04
    
    steps:
      - name: ‚è±Ô∏è Initialize Build Environment
        run: echo "BUILD_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: üì¶ Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git build-essential flex bison libssl-dev libelf-dev ccache bc libz-dev wget python3 zip

      - name: ‚ö° Setup Toolchain Caching
        id: toolchain-cache
        uses: actions/cache@v4
        with:
          path: |
            clang-toolchain
            gcc64
            gcc32
          key: toolchain-${{ runner.os }}-${{ github.event.inputs.clang_repo }}-${{ github.event.inputs.clang_branch }}

      - name: ‚öôÔ∏è Download Toolchains (if not cached)
        if: steps.toolchain-cache.outputs.cache-hit != 'true'
        run: |
          echo "Cache not found. Cloning toolchains..."
          git clone --depth=1 https://github.com/${{ github.event.inputs.clang_repo }} -b ${{ github.event.inputs.clang_branch }} clang-toolchain
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 gcc64
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 gcc32
        
      - name: üìö Checkout Kernel and AnyKernel3 Sources
        run: |
          git clone --depth=1 https://github.com/${{ github.event.inputs.kernel_repo }} -b ${{ github.event.inputs.kernel_branch }} kernel_source
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3 anykernel3

      - name: üîß Set up Build Environment Variables
        run: |
          echo "Setting up environment variables..."
          echo "PATH=$(pwd)/clang-toolchain/bin:$(pwd)/gcc64/bin:$(pwd)/gcc32/bin:$PATH" >> $GITHUB_ENV
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-android-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM32=arm-linux-androideabi-" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          
      - name: ‚ú® Add KernelSU Source (Optional)
        if: github.event.inputs.include_ksu == true
        working-directory: ./kernel_source
        run: |
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main

      - name: ü©π Apply Legacy Fixes (Optional)
        if: github.event.inputs.apply_legacy_fixes == true
        working-directory: ./kernel_source
        run: |
          echo "Applying comprehensive legacy fixes..."
          sed -i "s/print >> sys.stderr, \(.*\),/print(\1, file=sys.stderr, end='')/g" scripts/gcc-wrapper.py
          sed -i "s/print >> sys.stderr, \(.*\)/print(\1, file=sys.stderr)/g" scripts/gcc-wrapper.py
          sed -i '/-mcpu/d' Makefile
          
      - name: üöÄ Compile Kernel
        working-directory: ./kernel_source
        run: |
          make O=out ${{ github.event.inputs.defconfig_name }}
          
          if ${{ github.event.inputs.include_ksu }}; then
            echo "Enabling KernelSU configurations..."
            echo "CONFIG_KSU=y" >> out/.config
            echo "CONFIG_KPROBES=y" >> out/.config
            echo "CONFIG_HAVE_KPROBES=y" >> out/.config
            echo "CONFIG_KPROBE_EVENTS=y" >> out/.config
          fi
          
          if ${{ github.event.inputs.apply_legacy_fixes }}; then
            echo "Applying legacy .config fixes..."
            sed -i 's/CONFIG_CC_STACKPROTECTOR_STRONG=y/# CONFIG_CC_STACKPROTECTOR_STRONG is not set/' out/.config
            sed -i 's/CONFIG_CC_STACKPROTECTOR=y/# CONFIG_CC_STACKPROTECTOR is not set/' out/.config
          fi
          
          echo "Starting kernel compilation..."
          make O=out -j$(nproc --all) HOSTCC=gcc
          
          if [ ! -f "out/arch/arm64/boot/${{ github.event.inputs.image_name }}" ]; then
            echo "Kernel image not found! Build failed."
            exit 1
          fi

      - name: üì¶ Add SOSFOS Module to AnyKernel3 (Optional)
        if: github.event.inputs.include_sosfos == true
        run: |
          git clone --depth=1 https://github.com/T-s-s/SOSFOS-KSU-mod anykernel3/
          
      - name: üì¶ Package with AnyKernel3
        run: |
          echo "Packaging into a flashable zip..."
          cp kernel_source/out/arch/arm64/boot/${{ github.event.inputs.image_name }} anykernel3/
          cd anykernel3
          zip -r9 ${{ github.event.inputs.zip_name }}.zip . -x ".git*" -x "README.md" -x "*placeholder"
          
      - name: ‚¨ÜÔ∏è Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.zip_name }}
          path: anykernel3/${{ github.event.inputs.zip_name }}.zip

      - name: üìä Post-Build Summary
        if: always()
        run: |
          BUILD_END_TIME=$(date +%s)
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "========================================"
          echo "  BUILD SUMMARY"
          echo "========================================"
          echo "Status: ${{ job.status }}"
          echo "Total build time: $((BUILD_DURATION / 60)) minutes and $((BUILD_DURATION % 60)) seconds."
          echo "========================================"
