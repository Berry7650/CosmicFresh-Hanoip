name: Custom Kernel Build

on:
  workflow_dispatch:
    inputs:
      kernel_repo:
        description: 'Kernel source repository'
        required: true
        default: 'Dark-Matter7232/CosmicFresh-Hanoip'
      kernel_branch:
        description: 'Kernel source branch'
        required: true
        default: 'main'
      defconfig_name:
        description: 'Kernel defconfig name'
        required: true
        default: 'hanoip_defconfig'
      clang_repo:
        description: 'Clang toolchain repository'
        required: true
        default: 'kdrag0n/proton-clang'
      clang_branch:
        description: 'Clang toolchain branch'
        required: true
        default: 'master'

jobs:
  build_kernel:
    runs-on: ubuntu-latest
    
    steps:
      - name: üöÄ Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.kernel_repo }}
          ref: ${{ github.event.inputs.kernel_branch }}
          path: kernel_source

      - name: üì¶ Checkout AnyKernel3
        uses: actions/checkout@v4
        with:
          repository: 'osm0sis/AnyKernel3'
          path: anykernel3

      - name: üõ†Ô∏è Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential flex bison libssl-dev libelf-dev ccache bc libz-dev wget python3

      - name: ‚öôÔ∏è Checkout Clang Toolchain
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.clang_repo }}
          ref: ${{ github.event.inputs.clang_branch }}
          path: clang-toolchain
          
      - name: ‚öôÔ∏è Clone GCC Toolchains
        run: |
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 gcc64
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 gcc32

      - name: ‚öôÔ∏è Set up Environment Variables & Apply Fixes
        run: |
          echo "PATH=/usr/bin:$(pwd)/clang-toolchain/bin:$(pwd)/gcc64/bin:$(pwd)/gcc32/bin:$PATH" >> $GITHUB_ENV
          
          # ‚ö†Ô∏è FIX 1: Patch Python 2 print syntax to Python 3, avoiding extra commas.
          sed -i -e 's/print >> sys.stderr, /print(/g' -e 's/,$/)/g' ./kernel_source/scripts/gcc-wrapper.py
          
          # ‚ö†Ô∏è FIX 2: Patch byte string issues for Python 3 compatibility.
          sed -i 's/line\.rstrip('\''\\n'\'')/line.decode('\''utf-8'\'').rstrip('\''\\n'\'')/g' ./kernel_source/scripts/gcc-wrapper.py
          
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-android-" >> $GITHUB_ENV
          echo "CROSS_COMPILE_ARM32=arm-linux-androideabi-" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          
      - name: üíª Configure Kernel & Apply Fixes
        run: |
          cd kernel_source
          # ‚ö†Ô∏è FIX 3: Remove unsupported -mcpu flags
          sed -i '/-mcpu/d' Makefile
          
          # This command creates the 'out' directory and the initial .config file
          make O=out ${{ github.event.inputs.defconfig_name }}
          
          # Fix compiler flag issues by disabling unsupported stack protector
          sed -i 's/CONFIG_CC_STACKPROTECTOR_STRONG=y/CONFIG_CC_STACKPROTECTOR_STRONG=n/g' out/.config
          
      - name: üíª Build Kernel
        id: build_step
        run: |
          cd kernel_source
          # The build now starts with the corrected files and configuration
          make O=out -j$(nproc --all)

      - name: üì¶ Package with AnyKernel3
        run: |
          cd anykernel3
          cp ../kernel_source/out/arch/arm64/boot/Image.gz-dtb .
          zip -r9 ${{ github.event.repository.name }}_${{ github.sha }}.zip . -x .git
          
      - name: ‚¨ÜÔ∏è Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: custom-kernel
          path: anykernel3/*.zip
